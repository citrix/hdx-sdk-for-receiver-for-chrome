{
    "docs": [
        {
            "location": "/", 
            "text": "HDX SDK for Citrix Receiver for Chrome\n\n\nCitrix Receiver for Chrome introduces an API (Experimental API) that allow third-party Chrome apps to lock, unlock and disconnect from a XenApp and XenDesktop session. Using this API, Citrix Receiver for Chrome can be launched in both embedded mode and KIOSK mode. Sessions launched in embedded mode function  in ways similar to sessions launched KIOSK mode.\n\n\nSessions launched in embed mode functions in ways similar to sessions launched in KIOSK mode. \n\n\n\n\nImportant\nThis feature has been verified with the launch of a single app or desktop only.\n\n\n\n\n\n\nPrerequisites\n\n\nCitrix Receiver for Chrome supports only the whitelisted third-party Chrome apps. You can whitelist a third-party Chrome app by adding the policy file for Citrix Receiver for Chrome using Chrome management settings\n\n\nTo whitelist a third-party Chrome app, do the following: \n\n\n\n\n\n\nInstall the latest version of Citrix Receiver for Chrome. See Citrix downloads page for details.\n\n\n\n\n\n\nWhitelist the third-party Chrome app by adding the policy file for Citrix Receiver for Chrome using Chrome management settings.\n\n\n\n\n\n\nThe sample policy.txt file to whitelist the third-party Chrome app is as below:\n\n\n{\n    \nsettings\n: {\n\n         \nValue\n: {\n\n            \u00a0\nsettings_version\n: \n1.0\n,\n\n             \nstore_settings\n: {\n\n                    \nexternalApps\n: [\u201c\n3rdParty_App1_ExtnID\n\u201d,\u201c\n3rdParty_App2_ExtnID\n\u201d]\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n}\n\n\n\n\n\n\n\nNote\n3rdParty_App1_ExtnID\n is used as an example for the name of externalApps and can send messages to Citrix Receiver for Chrome. Get your appid from the \nchrome://extensions\n site.\n\n\n\n\n\n\nAdditional references:\n\n\nCitrix Receiver for Chrome uses message communication provided by Chrome OS. For more details, see the following links:\n\n\n\n\nhttps://developer.chrome.com/apps/tags/appview\n \n\n\nhttps://developer.chrome.com/extensions/runtime#event-onMessageExternal\n \n\n\nhttps://developer.chrome.com/extensions/runtime#method-sendMessage\n\n\nFor more details, see Manage Chrome Apps by organizational unit on Google support.  \n\n\nFor more information on whitelisting, see \nhttps://support.google.com/chrome/a/answer/6177431?hl=en", 
            "title": "Overview"
        }, 
        {
            "location": "/#hdx-sdk-for-citrix-receiver-for-chrome", 
            "text": "Citrix Receiver for Chrome introduces an API (Experimental API) that allow third-party Chrome apps to lock, unlock and disconnect from a XenApp and XenDesktop session. Using this API, Citrix Receiver for Chrome can be launched in both embedded mode and KIOSK mode. Sessions launched in embedded mode function  in ways similar to sessions launched KIOSK mode.  Sessions launched in embed mode functions in ways similar to sessions launched in KIOSK mode.    Important This feature has been verified with the launch of a single app or desktop only.", 
            "title": "HDX SDK for Citrix Receiver for Chrome"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Citrix Receiver for Chrome supports only the whitelisted third-party Chrome apps. You can whitelist a third-party Chrome app by adding the policy file for Citrix Receiver for Chrome using Chrome management settings  To whitelist a third-party Chrome app, do the following:     Install the latest version of Citrix Receiver for Chrome. See Citrix downloads page for details.    Whitelist the third-party Chrome app by adding the policy file for Citrix Receiver for Chrome using Chrome management settings.    The sample policy.txt file to whitelist the third-party Chrome app is as below:  {\n     settings : {\n\n          Value : {\n\n            \u00a0 settings_version :  1.0 ,\n\n              store_settings : {\n\n                     externalApps : [\u201c 3rdParty_App1_ExtnID \u201d,\u201c 3rdParty_App2_ExtnID \u201d]\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n}   Note 3rdParty_App1_ExtnID  is used as an example for the name of externalApps and can send messages to Citrix Receiver for Chrome. Get your appid from the  chrome://extensions  site.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#additional-references", 
            "text": "Citrix Receiver for Chrome uses message communication provided by Chrome OS. For more details, see the following links:   https://developer.chrome.com/apps/tags/appview    https://developer.chrome.com/extensions/runtime#event-onMessageExternal    https://developer.chrome.com/extensions/runtime#method-sendMessage  For more details, see Manage Chrome Apps by organizational unit on Google support.    For more information on whitelisting, see  https://support.google.com/chrome/a/answer/6177431?hl=en", 
            "title": "Additional references:"
        }, 
        {
            "location": "/capabilities/", 
            "text": "Capabilities\n\n\nLaunching a session\n\n\n\n\nGet the \nreceiverId\n\n\n\n\nvar receiverId = \n haiffjcadagjlijoggckpgfnoeiflnem \n;\n\n\n\n\n\n\n\nNote\nIn this example, receiverId indicates the store version of Citrix Receiver for Chrome. If you are using a repackaged version of Citrix Receiver for Chrome, use the appropriate \nreceiverId\n.\n\n\n\n\n\n\n.    Convert ICA data from \n.ini\n to \nJSON\n format.\n\n\n\n\nNote\nTypically, the ICA file is retrieved from StoreFront as an \n.ini\n file. Use the following helper function to convert an ICA \n.ini\n file to \nJSON\n.\n\n\n\n\n\n\n//Helper function to convert ica in INI format to JSON\n\n\nfunction\n \nconvertICA_INI_TO_JSON\n(\ndata\n){\n\n\nvar\n \nkeyVals\n \n=\n \n{};\n\n\nif\n \n(\ndata\n)\n \n{\n\n\nvar\n \ndataArr\n;\n\n\nif\n(\ndata\n.\nindexOf\n(\n\\r\n)\n==-\n1\n){\n\n\ndataArr\n \n=\n \ndata\n.\nsplit\n(\n\\n\n);\n\n\n}\nelse\n{\n\n\ndataArr\n \n=\n \ndata\n.\nsplit\n(\n\\r\\n\n);\n\n\n}\n\n\nfor\n \n(\nvar\n \ni\n \n=\n \n0\n;\n \ni\n \n \ndataArr\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n\nvar\n \nnameValue\n \n=\n \ndataArr\n[\ni\n].\nsplit\n(\n=\n,\n \n2\n);\n\n\nif\n \n(\nnameValue\n.\nlength\n \n===\n \n2\n)\n \n{\n\n\nkeyVals\n[\nnameValue\n[\n0\n]]\n \n=\n \nnameValue\n[\n1\n];\n\n\n}\n\n\n// This is required as LaunchReference will contain \n=\n as well. The above split(\n=\n,2) will not provide\n\n\n// the complete LaunchReference. Ideally, something like the following should be used generically as well\n\n\n// because there can be other variables that use the \n=\n character as part of the value.\n\n\nif\n \n(\nnameValue\n[\n0\n]\n \n===\n \nLaunchReference\n)\n \n{\n\n\nvar\n \nindex\n \n=\n \ndataArr\n[\ni\n].\nindexOf\n(\n=\n);\n\n\nvar\n \nvalue\n \n=\n \ndataArr\n[\ni\n].\nsubstr\n(\nindex\n \n+\n \n1\n);\n\n\nkeyVals\n[\nnameValue\n[\n0\n]]\n \n=\n \nvalue\n;\n\n\n}\n\n\n}\n\n\nconsole\n.\nlog\n(\nkeyVals\n);\n//to remove\n\n\nreturn\n \nkeyVals\n;\n\n\n}\n\n\nreturn\n \nnull\n;\n\n\n}\n\n\n\n\n\n\n.   Send the following message from the third-party Chrome app to Citrix Receiver for Chrome. \n\n\nchrome.runtime.sendMessage(receiverId , {\nmethod\n : \nlaunchSession\n,\nicaData\n:icaJSON,\u201dsessionId\u201d:sessionId},function(response) { });\n\n\n\n\n\nwhere:\n\n\n\n\nicaJSON\n indicates the ICA data in the form of JSON object created using the helper function.\n\n\nsessionId\n is applicable in case of embedding receiver in appview. \n\n\nresponse: {\"success\":true,\"sessionId\":\"Session1481109162565\"}\n  \n\n\n\n\nFor further communication with the active session (for example, hide/unhide/disconnect) the Session ID needs to be stored.\n\n\nIn case of error, response looks like below\n\n\n{\nsuccess\n:false,\nerror\n:\nInvalid params: no icadata\n}\n\n\n\n\n\nHide a session\n\n\n\n\nSend the following message from the third-party Chrome app to Citrix Receiver for Chrome. \n\n\n\n\nchrome.runtime.sendMessage(receiverId, {\nmethod\n : \nhide\n,\nsessionId\n:sessionId},function(response) { })\n\n\n\n\n\nwhere \nsessionId\n is applicable in case of embedding receiver in appview. For more details, see Embedding Receiver using appview.\n\n\n\n\nNote\nWhen a session is launched in embed view, the appview attribute must be set to hidden in the third-party app.\n\n\n\n\n\n\nIn case of error, response looks like below:\n\n\n{\nsuccess\n:false,\nerror\n:\nInvalid sessionId\n}.\n\n\n\n\n\nShow a session\n\n\n\n\nSend the following message from the third-party Chrome app to Citrix Receiver for Chrome.\n\n\n\n\nchrome.runtime.sendMessage(receiverId, {\nmethod\n : \nshow\n,\nsessionId\n:sessionId,function(response) { });\n\n\n\n\n\nwhere, \nsessionId\n is applicable in case of embedding receiver in appview. \n\n\n\n\nNote\nWhen a session is launched in embed view, the appview attribute must be set to hidden in the third-party app.\n\n\n\n\n\n\nIn case of error, response looks like below:\n\n\n{\nsuccess\n:false,\nerror\n:\nInvalid sessionId\n}.\n\n\n\n\n\nDisconnect the session\n\n\nSend the following message from the third-party Chrome app to Citrix Receiver for Chrome. \n\n\nchrome.runtime.sendMessage(receiverId, {\nmethod\n : \ndisconnect\n,\nsessionId\n:sessionId},function(response) { });\n\n\n\n\n\nwhere \nsessionId\n is applicable in case of embedding receiver in appview. \n\n\nIn case of error, response looks like below:\n\n\n{\nsuccess\n:false,\nerror\n:\nInvalid sessionId\n}.\n\n\n\n\n\nLaunching Citrix Receiver for Chrome in embed mode\n\n\nA third-party app can be embedded to Citrix Receiver for Chrome using the appview attribute. \n\n\nFollow the procedure below:\n\n\n\n\nCreate an appview element in the third-party app. Also, register the chrome.runtime.onMessageExternal listener in the background page of the app to receive status of embedding.\nFor example:\n\n\n\n\nvar appview = document.createElement(\nappview\n);\nappview.id = \nappView\n;\n// Appends the element to the document body.\ndocument.body.appendChild(appview);\n\n\n\n\n\n.  Call connect method\n\n\nCall connect method can be achieved by passing the receiver id. Citrix Receiver for Chrome checks if the sender app is whitelisted and sends a message with embed state success. sessionId is posted to the sender app. Session id needs to be stored to do further interactions with the session. \n\n\nFor example, \n\n\nvar\n \nappToEmbed\n \n=\n \nreceiverId\n;\n//Get the citrix receiver id\n\n\n\nfunction\n \nembedCallback\n(\nresponse\n){\n\n\n//response value will be true if embedding is allowed otherwise value will be false\n\n\n}\n\n\n\n// Connects the appview to appToEmbed.\n\n\n// appToEmbed is the id of the Citrix Receiver for Chrome.\n\n\n\nappview\n.\nconnect\n(\nappToEmbed\n,\ndata\n,\nembedCallback\n);\n\n\n\n\n\n\n\n\nNote\nWhen a third-party app is launched in KIOSK mode, the session cannot be launched in embed mode.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/capabilities/#capabilities", 
            "text": "", 
            "title": "Capabilities"
        }, 
        {
            "location": "/capabilities/#launching-a-session", 
            "text": "Get the  receiverId   var receiverId =   haiffjcadagjlijoggckpgfnoeiflnem  ;   Note In this example, receiverId indicates the store version of Citrix Receiver for Chrome. If you are using a repackaged version of Citrix Receiver for Chrome, use the appropriate  receiverId .    .    Convert ICA data from  .ini  to  JSON  format.   Note Typically, the ICA file is retrieved from StoreFront as an  .ini  file. Use the following helper function to convert an ICA  .ini  file to  JSON .    //Helper function to convert ica in INI format to JSON  function   convertICA_INI_TO_JSON ( data ){  var   keyVals   =   {};  if   ( data )   {  var   dataArr ;  if ( data . indexOf ( \\r ) ==- 1 ){  dataArr   =   data . split ( \\n );  } else {  dataArr   =   data . split ( \\r\\n );  }  for   ( var   i   =   0 ;   i     dataArr . length ;   i ++ )   {  var   nameValue   =   dataArr [ i ]. split ( = ,   2 );  if   ( nameValue . length   ===   2 )   {  keyVals [ nameValue [ 0 ]]   =   nameValue [ 1 ];  }  // This is required as LaunchReference will contain  =  as well. The above split( = ,2) will not provide  // the complete LaunchReference. Ideally, something like the following should be used generically as well  // because there can be other variables that use the  =  character as part of the value.  if   ( nameValue [ 0 ]   ===   LaunchReference )   {  var   index   =   dataArr [ i ]. indexOf ( = );  var   value   =   dataArr [ i ]. substr ( index   +   1 );  keyVals [ nameValue [ 0 ]]   =   value ;  }  }  console . log ( keyVals ); //to remove  return   keyVals ;  }  return   null ;  }   .   Send the following message from the third-party Chrome app to Citrix Receiver for Chrome.   chrome.runtime.sendMessage(receiverId , { method  :  launchSession , icaData :icaJSON,\u201dsessionId\u201d:sessionId},function(response) { });  where:   icaJSON  indicates the ICA data in the form of JSON object created using the helper function.  sessionId  is applicable in case of embedding receiver in appview.   response: {\"success\":true,\"sessionId\":\"Session1481109162565\"}      For further communication with the active session (for example, hide/unhide/disconnect) the Session ID needs to be stored.  In case of error, response looks like below  { success :false, error : Invalid params: no icadata }", 
            "title": "Launching a session"
        }, 
        {
            "location": "/capabilities/#hide-a-session", 
            "text": "Send the following message from the third-party Chrome app to Citrix Receiver for Chrome.    chrome.runtime.sendMessage(receiverId, { method  :  hide , sessionId :sessionId},function(response) { })  where  sessionId  is applicable in case of embedding receiver in appview. For more details, see Embedding Receiver using appview.   Note When a session is launched in embed view, the appview attribute must be set to hidden in the third-party app.    In case of error, response looks like below:  { success :false, error : Invalid sessionId }.", 
            "title": "Hide a session"
        }, 
        {
            "location": "/capabilities/#show-a-session", 
            "text": "Send the following message from the third-party Chrome app to Citrix Receiver for Chrome.   chrome.runtime.sendMessage(receiverId, { method  :  show , sessionId :sessionId,function(response) { });  where,  sessionId  is applicable in case of embedding receiver in appview.    Note When a session is launched in embed view, the appview attribute must be set to hidden in the third-party app.    In case of error, response looks like below:  { success :false, error : Invalid sessionId }.", 
            "title": "Show a session"
        }, 
        {
            "location": "/capabilities/#disconnect-the-session", 
            "text": "Send the following message from the third-party Chrome app to Citrix Receiver for Chrome.   chrome.runtime.sendMessage(receiverId, { method  :  disconnect , sessionId :sessionId},function(response) { });  where  sessionId  is applicable in case of embedding receiver in appview.   In case of error, response looks like below:  { success :false, error : Invalid sessionId }.", 
            "title": "Disconnect the session"
        }, 
        {
            "location": "/capabilities/#launching-citrix-receiver-for-chrome-in-embed-mode", 
            "text": "A third-party app can be embedded to Citrix Receiver for Chrome using the appview attribute.   Follow the procedure below:   Create an appview element in the third-party app. Also, register the chrome.runtime.onMessageExternal listener in the background page of the app to receive status of embedding.\nFor example:   var appview = document.createElement( appview );\nappview.id =  appView ;\n// Appends the element to the document body.\ndocument.body.appendChild(appview);  .  Call connect method  Call connect method can be achieved by passing the receiver id. Citrix Receiver for Chrome checks if the sender app is whitelisted and sends a message with embed state success. sessionId is posted to the sender app. Session id needs to be stored to do further interactions with the session.   For example,   var   appToEmbed   =   receiverId ; //Get the citrix receiver id  function   embedCallback ( response ){  //response value will be true if embedding is allowed otherwise value will be false  }  // Connects the appview to appToEmbed.  // appToEmbed is the id of the Citrix Receiver for Chrome.  appview . connect ( appToEmbed , data , embedCallback );    Note When a third-party app is launched in KIOSK mode, the session cannot be launched in embed mode.", 
            "title": "Launching Citrix Receiver for Chrome in embed mode"
        }
    ]
}